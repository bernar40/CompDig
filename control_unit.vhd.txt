
entity control_unit is

PORT(
clk_50MHZ : IN STD_LOGIC;
reset : IN STD_LOGIC;
)

end control_unit;

architecture behavioral of control_unit is

COMPONENT ALU
	PORT(

		);
END COMPONENT;
	
COMPONENT memoria_ram
	PORT(

END COMPONENT;

-- CONTROLE DO CLOCK
signal clk_2seg : STD_LOGIC;
signal count_clk : INTEGER := 0;
signal direction_clk : STD_LOGIC := '1';

-- ESTADOS DE EXECUCAO
type estados is (inicio, fetch, decode, execute, fim);
signal PS, NS : estados := inicio;

-- REGISTRADORES
signal rA, rB, ri, pc : std_logic_vector(4 downto 0) := "0000";

begin

-- Processo que transforma o clock de 50MHZ em 0,5HZ
	process (clk_50MHZ)
	begin
		if (CLK_50MHZ'event and CLK_50MHZ = '1') then
			if (count_clk < 50000000 and direction_clk = '1') then
					clk_2seg <= '0';
					count_clk <= count_clk + 1;
			elsif (count_clk < 100000000 and direction_clk = '1') then
					clk_2seg <= '1';
					count_clk <= count_clk + 1;
			else 
					count_clk <= 0;
			end if;
			debug_clk500hz <= clk_2seg;
		end if;
	end process;


-- Processo que troca estado a cada subida do clock de 2 segundos
	process (clk_2seg)
	begin
		if (reset = '1') then
			ps <= inicio;
		elsif (clk_2seg'event and clk_2seg = '1') then
			ps <= ns;
		end if;
	end process;


-- Processo que executa as tarefas do estado atual e troca para o proximo estado
	process (ps, rA, rB, ri, pc)
	begin
		case ps:
			when inicio =>
				if (reset = '0') then
					ns <= fetch;
				end if;

			when fetch =>

			when decode =>

			when execute =>
		end case;
	end process;


end behavioral;