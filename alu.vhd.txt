

entity alu is
	port(
		operando1 : in std_logic_vector(4 downto 0);
		operando2 : in std_logic_vector(4 downto 0);
		opcode : in std_logic_vector(4 downto 0); -- opcode do comando atual a ser executado
		result : out std_logic_vector(4 downto 0); -- resultado da operacao
		flag : out std_logic_vector(1 downto 0);  -- flag de resultado -> 00 = normal, 01 = Zero, 10 = Negativo

	);
end alu;


architecture arch_alu of alu is

signal op1local, op2local, resultLocal : std_logic_vector(4 downto 0);


begin

	process (operando1, operando2, opcode) is
	begin
		op1local <= signed(operando1);
		op2local <= signed(operando2);
		case opcode is
			when "00101" =>	resulLocal <= std_logic_vector(op1local + op2local);	-- A + B
					
			when "00110" => resulLocal <= std_logic_vector(op1local - op2local);	-- A - B

			when "00111" => resulLocal <= operando1 AND operando2;	-- A AND B

			when "01000" => resulLocal <= operando1 OR operando2;	-- A OR B

			when "01001" => resulLocal <= operando1 XOR operando2;	-- A XOR B

			when "01010" => resulLocal <= operando1 NOT operando2;	-- A NOT B

			when "01011" => resulLocal <= operando1 NAND operando2;	-- A NAND B

			when "10000" => resulLocal <= std_logic_vector(op1local + 1);	-- INC A

			when "10001" => resulLocal <= std_logic_vector(op2local + 1);	-- INC B

			when "10010" => resulLocal <= std_logic_vector(op1local - 1);	-- DEC A

			when "10011" => resulLocal <= std_logic_vector(op2local - 1);	-- DEC B

			when others => resultLocal <= "00000";
		end case;

		if resultLocal = "00000" then
			flag <= "01";
		elsif resultLocal(4) = '1' then
			flag <= "10";
		else
			flag <= "00";
		end if;
		
		result <= resultLocal;

	end process;

end arch_alu;